
==================== FINAL INTERFACE ====================
2016-11-11 16:54:42.073699 UTC

interface main@main:Example 8001
  interface hash: 376e11e084a29a472b04590dd9348d9a
  ABI hash: 92a94fafd3aaa33e269392f909d9e031
  export-list hash: cecedf13c194625eff17029c7610857f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 995a5ce452f5ac0b0a01a57b68a9fbe3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Example.addT
  Example.bouncingBall
  Example.example
  Example.joinDS
  Example.movingBall
  Example.preaddT
  Example.rotatingSquare
  Example.runExample
  Example.staticBall
module dependencies: Animate Ansi Render Shapes Signal
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 time-1.6.0.1@time-1.6.0.1
                      unix-2.7.2.0@unix-2.7.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  Animate 785b9f8df392fea7550ee07935d80690
  exports: 5d0d734e8a972508a93a3623c9337d74
  animate 32a14248a397cfa5c47f7e4ebb2b9152
import  -/  Render 3ad7108d30c91fe70eb9ed6283bcfa63
  exports: 42196c7712c814c6bac2d5299bac88ac
  defaultWindow 48a88138e494cb28733578c245d471f5
import  -/  Shapes 3fb2f51359da3b7f3d9fe72698b76353
  exports: 86eff6cedd199d63d8d2bc7976a8b0bf
  <+> 217c09de983e187eda7aabba3a474f3b
  Drawing ab30969f58343d5089d647f1b92373e0
  Point a7aa7d239ccf8d784d0c67e582e1c3e1
  Shape ea4a37e76634c56280be87aea2e4e5ea
  Transform f12c270bd256f3f7b2274acbc457f84a
  circle 5b7e9dc046123bc97c66d1930a1e96b6
  point 924515cb24d4817c3aedb37ff6ce6fd3
  rotate cdb425bd0a9e8cd27887791db2e769a3
  scale 337340fc723adb5401c0bcd3def9f2e4
  square 1386e88c4fec7502299b29e1dc126b9c
  translate eebc4e973efb883076159d4278e4b83f
import  -/  Signal 36e4326620f706619c90ca6d3e945f05
  exports: e3576e45d05059d4e39842e708f127b6
  Signal e73cc68dc90bb2e98df63201951ac43a
  timeS 292948fad36ba5947ae0edc3233045eb
6ce0f3ec767d642bebbefa741a9355a7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Example.$trModule2
                   Example.$trModule1) -}
8a9e7ce7261fe7c4202b8d7969ebdc5a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Example"#) -}
68b11f4d331ec67bf25602cbde84726d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8dded055da36eb32bccb1f6f65122b4f
  $wexample ::
    Signal.Time
    -> (# (Shapes.Transform, Shapes.Shape),
          [(Shapes.Transform, Shapes.Shape)] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>, Inline: [0],
     Unfolding: (\ (w :: Signal.Time) ->
                 (# (Shapes.Compose
                       (Shapes.Translate
                          (Shapes.Vector
                             (case w of wild1 { GHC.Types.D# y ->
                              GHC.Types.D# (GHC.Prim.sinDouble# (GHC.Prim.+## y y)) })
                             (case w of wild1 { GHC.Types.D# y ->
                              GHC.Types.D# (GHC.Prim.sinDouble# (GHC.Prim.*## 3.0## y)) })))
                       Example.bouncingBall2,
                     Shapes.Circle),
                    GHC.Types.:
                      @ (Shapes.Transform, Shapes.Shape)
                      (Shapes.Compose Example.example2 (Shapes.rotate w), Shapes.Square)
                      (GHC.Types.[] @ (Shapes.Transform, Shapes.Shape)) #)) -}
58b402f51a32b9fd97a0330adeca49bd
  addT ::
    (Shapes.Transform, Shapes.Shape)
    -> Shapes.Transform -> (Shapes.Transform, Shapes.Shape)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (Shapes.Transform, Shapes.Shape))
                   (t :: Shapes.Transform) ->
                 case ds of wild { (,) ts s -> (Shapes.Compose ts t, s) }) -}
f401085c9a9a2f8832f9590f0280ad3b
  bouncingBall :: Signal.Signal Shapes.Drawing
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                Example.bouncingBall1
                  `cast`
                (Sym (Signal.N:Signal[0]) <[(Shapes.Transform,
                                             Shapes.Shape)]>_N) -}
ae4b51158217e39a854ef94e937ba2c9
  bouncingBall1 :: Signal.Time -> [(Shapes.Transform, Shapes.Shape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Signal.Time) ->
                 GHC.Types.:
                   @ (Shapes.Transform, Shapes.Shape)
                   (Shapes.Compose
                      (Shapes.Translate
                         (Shapes.Vector
                            (case w of wild1 { GHC.Types.D# y ->
                             GHC.Types.D# (GHC.Prim.sinDouble# (GHC.Prim.+## y y)) })
                            (case w of wild1 { GHC.Types.D# y ->
                             GHC.Types.D# (GHC.Prim.sinDouble# (GHC.Prim.*## 3.0## y)) })))
                      Example.bouncingBall2,
                    Shapes.Circle)
                   (GHC.Types.[] @ (Shapes.Transform, Shapes.Shape))) -}
329576ec76b003c79bf5383e11378889
  bouncingBall2 :: Shapes.Transform
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Shapes.Scale Example.bouncingBall3) -}
88401abfe04675c922d72d28f5f0326b
  bouncingBall3 :: Shapes.Vector
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Shapes.Vector
                   Example.bouncingBall4
                   Example.bouncingBall4) -}
14dae9fc68448565ca56a03fe67314ae
  bouncingBall4 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.3##) -}
86e07f082dda936f52824343576a3366
  example :: Signal.Signal [(Shapes.Transform, Shapes.Shape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                Example.example1
                  `cast`
                (Sym (Signal.N:Signal[0]) <[(Shapes.Transform,
                                             Shapes.Shape)]>_N) -}
daf4c3b8decce962914a78dfd9c488c9
  example1 :: Signal.Time -> [(Shapes.Transform, Shapes.Shape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Signal.Time) ->
                 case Example.$wexample w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (Shapes.Transform, Shapes.Shape) ww1 ww2 }) -}
0766d6dbfc2ca4595c074e31145668f9
  example2 :: Shapes.Transform
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Shapes.Compose Example.example7 Example.example3) -}
001bd46f52d9e0eb2cf8d18277f78609
  example3 :: Shapes.Transform
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Shapes.Translate Example.example4) -}
523be86039f7ad614f3f73151d75837d
  example4 :: Shapes.Vector
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Shapes.Vector Example.example6 Example.example5) -}
56236c3b2deb67d5d91a4661f71e5d25
  example5 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.4##) -}
16c760334246436efb7cb584a6ace070
  example6 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.2##) -}
b23212fa063b676cd2185469ffcc9298
  example7 :: Shapes.Transform
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Shapes.Scale Example.example8) -}
061be7bea88016dee660dfb79d3751d6
  example8 :: Shapes.Vector
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Shapes.Vector Example.example9 Example.example9) -}
c24b938195ddefbcedb6863463edbfb8
  example9 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.5##) -}
186a564a796f3b2f467382ad4be6f2d4
  joinDS ::
    Signal.Signal [a] -> Signal.Signal [a] -> Signal.Signal [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Example.joinDS1
                  `cast`
                (forall (a :: <*>_N).
                 <Signal.Signal [a]>_R
                 ->_R <Signal.Signal [a]>_R
                 ->_R Sym (Signal.N:Signal[0]) <[a]>_N) -}
0298474017709c5a30257814acf3de70
  joinDS1 ::
    Signal.Signal [a] -> Signal.Signal [a] -> Signal.Time -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (s0 :: Signal.Signal [a])
                   (s1 :: Signal.Signal [a])
                   (eta :: Signal.Time) ->
                 GHC.Base.augment
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ a
                      @ b
                      c
                      n
                      (s0 `cast` (Signal.N:Signal[0] <[a]>_N) eta))
                   (s1 `cast` (Signal.N:Signal[0] <[a]>_N) eta)) -}
80dfd31fbe743f9d4bc2fbf282117c7b
  movingBall :: Signal.Signal Shapes.Drawing
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                Example.movingBall1
                  `cast`
                (Sym (Signal.N:Signal[0]) <[(Shapes.Transform,
                                             Shapes.Shape)]>_N) -}
8c486a9d902f75f036f0c812b88b5a80
  movingBall1 :: Signal.Time -> [(Shapes.Transform, Shapes.Shape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Signal.Time) ->
                 GHC.Types.:
                   @ (Shapes.Transform, Shapes.Shape)
                   (Shapes.Compose
                      Example.bouncingBall2
                      (Shapes.Translate
                         (Shapes.Vector
                            Example.movingBall_x
                            (case eta of wild1 { GHC.Types.D# y ->
                             GHC.Types.D# (GHC.Prim.sinDouble# (GHC.Prim.*## 3.0## y)) }))),
                    Shapes.Circle)
                   (GHC.Types.[] @ (Shapes.Transform, Shapes.Shape))) -}
8489376acf4671e3f3b72939fcf26460
  movingBall_x :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
ac6cfb8aed889f8f4ad821747ee44166
  preaddT ::
    (Shapes.Transform, Shapes.Shape)
    -> Shapes.Transform -> (Shapes.Transform, Shapes.Shape)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (Shapes.Transform, Shapes.Shape))
                   (t :: Shapes.Transform) ->
                 case ds of wild { (,) ts s -> (Shapes.Compose t ts, s) }) -}
839280ffd9a6c8444f138f13aa4ae9bc
  rotatingSquare :: Signal.Signal Shapes.Drawing
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Unfolding: InlineRule (0, True, True)
                Example.rotatingSquare1
                  `cast`
                (Sym (Signal.N:Signal[0]) <[(Shapes.Transform,
                                             Shapes.Shape)]>_N) -}
b0c7b1defb5088c56e0e3b3dea26e6ed
  rotatingSquare1 ::
    Signal.Time -> [(Shapes.Transform, Shapes.Shape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Signal.Time) ->
                 GHC.Types.:
                   @ (Shapes.Transform, Shapes.Shape)
                   (Shapes.Compose Example.example2 (Shapes.rotate eta),
                    Shapes.Square)
                   (GHC.Types.[] @ (Shapes.Transform, Shapes.Shape))) -}
fc8254450c92cd051fc411cfe7b0b4b0
  runExample :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Example.runExample1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
89532b07275bfddb21bfcee1be78dc5d
  runExample1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Animate.$wanimate
                   Render.defaultWindow
                   0.0##
                   15.0##
                   Example.example1
                     `cast`
                   (Sym (Signal.N:Signal[0]) <[(Shapes.Transform, Shapes.Shape)]>_N)
                   w4) -}
17c42ba5ea68d2fca584d0be5a709eb5
  staticBall :: Signal.Signal Shapes.Drawing
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (0, True, True)
                Example.staticBall1
                  `cast`
                (Sym (Signal.N:Signal[0]) <[(Shapes.Transform,
                                             Shapes.Shape)]>_N) -}
06b85e5d4ab8d305a9fd38c57c2ee645
  staticBall1 :: Signal.Time -> [(Shapes.Transform, Shapes.Shape)]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Signal.Time) -> Example.staticBall2) -}
23365eec824d60883377b252f8aee226
  staticBall2 :: [(Shapes.Transform, Shapes.Shape)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Shapes.Transform, Shapes.Shape)
                   Example.staticBall3
                   (GHC.Types.[] @ (Shapes.Transform, Shapes.Shape))) -}
cb02fb1ad1ecb89e8a71065cb3f510dc
  staticBall3 :: (Shapes.Transform, Shapes.Shape)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Example.example2, Shapes.Circle)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

